{"version":3,"sources":["webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/ami/account-credentials/account-credentials.component.ts","webpack:///src/app/ami/account-credentials/account-credentials.component.html","webpack:///src/app/ami/ami.component.ts","webpack:///src/app/ami/ami.component.html","webpack:///src/app/ami/instance-id/instance-id.component.ts","webpack:///src/app/ami/instance-id/instance-id.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.router.ts","webpack:///src/app/app.service.ts","webpack:///src/app/docker-page/docker-page.component.ts","webpack:///src/app/docker-page/docker-page.component.html","webpack:///src/app/guards/ami.guard.ts","webpack:///src/app/guards/docker.guard.ts","webpack:///src/app/guards/main.guard.ts","webpack:///src/app/guards/ovf.guard.ts","webpack:///src/app/guards/success-page.guard.ts","webpack:///src/app/ovf/account-credentials-ovf/account-credentials-ovf.component.ts","webpack:///src/app/ovf/account-credentials-ovf/account-credentials-ovf.component.html","webpack:///src/app/ovf/ovf.component.ts","webpack:///src/app/ovf/ovf.component.html","webpack:///src/app/success-page/success-page.component.ts","webpack:///src/app/success-page/success-page.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppAccountCredentialsComponent","router","appService","amiUserData","username","password","fields","USERNAME","PASSWORD","REPEAT_PASSWORD","isSubmitted","event","field","target","value","trim","repeatPassword","errorMessage","isIdentical","isError","onPasswordChange","checkUserData","navigate","err","error","title","statusText","onKey","submit","AppAmiInstallationComponent","AppInstanceIdComponent","instanceId","isOpenModal","checkInstanceId","toggleModal","AppComponent","AppModule","forRoot","AppRouter","path","children","component","canActivate","redirectTo","pathMatch","AppService","http","headers","url","instanceUrl","sshUrl","data","_isInstanceChecked","_isInstallationComplete","credentials","Username","Password","post","toPromise","Instance","ssh","key","AppDockerPageComponent","AmiGuard","INSTALLATION_TYPE","route","state","installationType","AmiCredentialsGuard","isInstanceChecked","DockerGuard","Installation","MainGuard","AMI","OVF","DOCKER","OvfGuard","SuccessPageGuard","isInstallationComplete","AppAccountCredentialsOvfComponent","ovfUserData","USERNAME_OVF","PASSWORD_OVF","REPEAT_PASSWORD_OVF","SSH_OVF","length","checkSSH","errorMessageSsh","AppOvfComponent","AppSuccessPageComponent","redirectToMainPage","window","location","replace","setTimeout","goTo","environment","production","bootstrapModule","console","log"],"mappings":"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","file":"main-es5.5c8018aafb7f870dbf0d.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppService } from '../../app.service';\n\n@Component({\n    selector: 'app-account-credentials',\n    templateUrl: './account-credentials.component.html',\n    styleUrls: ['./account-credentials.component.scss'],\n})\nexport class AppAccountCredentialsComponent {\n    public amiUserData = {\n        username: '',\n        password: '',\n    };\n\n    public fields = {\n        USERNAME: 'username',\n        PASSWORD: 'password',\n        REPEAT_PASSWORD: 'repeatPassword',\n    };\n\n    public repeatPassword: '';\n    public isIdentical: boolean;\n    public errorMessage: '';\n    public isSubmitted = false;\n\n    constructor(private router: Router, public appService: AppService) {\n    }\n\n    /**\n     * Trim whitespaces in fields\n     * @param event - User keyup event\n     * @param {string} field - Name of active input filed\n     */\n    onKey(event: any, field: string) {\n        switch(field) {\n            case this.fields.USERNAME: {\n                this.amiUserData.username = event.target.value.trim();\n                break;\n            }\n\n            case this.fields.PASSWORD: {\n                this.amiUserData.password = event.target.value.trim();\n                break;\n            }\n\n            case this.fields.REPEAT_PASSWORD: {\n                this.repeatPassword = event.target.value.trim();\n                break;\n            }\n        }\n        this.isSubmitted = false;\n        this.errorMessage = '';\n    }\n\n    /**\n     * Checks password fields for identical\n     */\n    public onPasswordChange(): void {\n        this.isIdentical = this.amiUserData.password === this.repeatPassword;\n    }\n\n    /**\n     * Send a request and navigate to success page if response is success\n     * @returns {boolean | void} boolean - result of matching password fields\n     */\n    public submit(isError): (boolean | void) {\n        this.isSubmitted = true;\n        this.onPasswordChange();\n        if (!this.isIdentical) { return false; }\n        if (isError) return;\n        this.appService.checkUserData(this.amiUserData).then(() => {\n            this.router.navigate(['success-page']);\n        }).catch( (err) => {\n            this.errorMessage = err.error.title ? err.error.title : err.statusText;\n        });\n    }\n}\n","<div class=\"tab-pane\">\n  <div class=\"row justify-content-center\">\n    <p>Create your username and password to access your PMM</p>\n  </div>\n  <form>\n    <div class=\"row\">\n      <div class=\"col-xl-8 col-10 offset-xl-2 offset-1 input-wrapper\">\n        <div class=\"row\">\n          <div class=\"col-12 text-right\">\n            <input type=\"text\" class=\"custom-form-input form-control\" placeholder=\"Username\"\n                   name=\"{{ fields.USERNAME }}\"\n                   [(ngModel)]=\"amiUserData.username\"\n                   #user=\"ngModel\"\n                   (keyup)=\"onKey($event, fields.USERNAME)\"\n                   required>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"user?.errors && isSubmitted\"\n               class=\"col-xl-9 col-12 error-text\">\n            <div *ngIf=\"user?.errors?.required\">*Field is required</div>\n          </div>\n            <div *ngIf=\"errorMessage\" class=\"error-text col-xl-9 col-xs-12\">*{{ errorMessage }}</div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-12 text-right\">\n            <input type=\"password\" class=\"custom-form-input form-control\" placeholder=\"Password\"\n                   name=\"{{ fields.PASSWORD }}\"\n                   [(ngModel)]=\"amiUserData.password\"\n                   #pass=\"ngModel\"\n                   (keyup)=\"onKey($event, fields.PASSWORD)\"\n                   maxlength=\"255\"\n                   required>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"pass?.errors && isSubmitted\"\n               class=\"col-xl-9 col-12 error-text\">\n            <div *ngIf=\"pass?.errors?.required\">*Field is required</div>\n            <div *ngIf=\"pass?.errors?.maxlength\">*Field can not me more than 255 characters</div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-12 text-right\">\n            <input type=\"password\" class=\"custom-form-input form-control\" placeholder=\"Repeat Password\"\n                   name=\"{{ fields.REPEAT_PASSWORD }}\"\n                   [(ngModel)]=\"repeatPassword\"\n                   #repeatpass=\"ngModel\"\n                   (keyup)=\"onKey($event, fields.REPEAT_PASSWORD)\"\n                   required>\n          </div>\n        </div>\n        <div class=\"row error-text\">\n          <div *ngIf=\"repeatpass?.errors && isSubmitted\"\n               class=\"col-xl-9 col-12\">\n            <div *ngIf=\"repeatpass?.errors?.required\">*Field is required</div>\n          </div>\n          <div *ngIf=\"!isIdentical && isSubmitted\" class=\"col-xl-9 col-12\">*Passwords must be identical</div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-12 text-right button-row\">\n            <button class=\"btn btn-primary\" type=\"reset\">Reset</button>\n            <button class=\"btn btn-primary\"\n                    (click)=\"submit(!user?.valid || !pass?.valid || !repeatpass?.valid)\">Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-add-ami',\n  templateUrl: './ami.component.html',\n  styleUrls: ['./ami.component.scss']\n})\nexport class AppAmiInstallationComponent {\n\n  constructor() { }\n}\n","<div class=\"container-fluid header\">\n    <div class=\"row\">\n        <div class=\"col-xl-4 col-5 border-right\">\n            <div class=\"container-fluid\">\n                <div class=\"row\">\n                    <div class=\"col-2\">\n                        <img src=\"./assets/pmm-logo.png\" class=\"header-logo\" alt=\"pmm-logo\">\n                    </div>\n                    <div class=\"col-10\">Percona Monitoring and Management</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-xl-8 col-7\">\n            <p>Installation <i class=\"fa fa-long-arrow-right\"></i> AMI</p>\n        </div>\n    </div>\n</div>\n<div class=\"container main\">\n    <div class=\"row\">\n        <div class=\"col-xl-10 offset-xl-1 col-12\">\n            <p class=\"text-center\">PMM Installation Wizard</p>\n            <section>\n                <ul class=\"nav nav-tabs gf-tabs\">\n                    <li class=\"nav-item gf-tabs-item\" routerLinkActive=\"active\"><a routerLink=\"instance-id\">Instance ID\n                        Verification</a>\n                    </li>\n                    <li><i class=\"fa fa-long-arrow-right\"></i></li>\n                    <li class=\"nav-item\" routerLinkActive=\"active\"><a routerLink=\"account-credentials\">Account\n                        Credentials</a></li>\n                </ul>\n                <div class=\"tab-content table-panel-wrapper\">\n                    <router-outlet></router-outlet>\n                </div>\n            </section>\n        </div>\n    </div>\n</div>\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppService } from '../../app.service';\n\n@Component({\n    selector: 'app-instance-id',\n    templateUrl: './instance-id.component.html',\n    styleUrls: ['./instance-id.component.scss'],\n})\nexport class AppInstanceIdComponent {\n    public instanceId = '';\n    public isOpenModal = false;\n    public errorMessage: '';\n    public isSubmitted = false;\n\n    constructor(private router: Router, public appService: AppService) {\n    }\n\n    /**\n     * Show modal dialog with instructions of getting instance id\n     */\n    public toggleModal(): void {\n        this.isOpenModal = !this.isOpenModal;\n    }\n\n    /**\n     * Trim whitespaces in instance id input field\n     * @param event - User keyup event\n     */\n    onKey(event: any) {\n        this.instanceId = event.target.value.trim();\n        this.isSubmitted = false;\n        this.errorMessage = '';\n    }\n\n    /**\n     * Send a request and navigate to success page if response is success\n     */\n    public submit(isError): void {\n        this.isSubmitted = true;\n        if (isError) return;\n        this.appService.checkInstanceId(this.instanceId).then(() => {\n            this.router.navigate(['ami/account-credentials']);\n        }).catch( (err) => {\n            this.errorMessage = err.error.title ? err.error.title : err.statusText;\n        });\n    }\n}\n","<div class=\"tab-pane\">\n  <div class=\"row\">\n    <p\n      class=\"text-center col-xl-8 col-10 offset-xl-2 offset-1\">\n      Please provide the Amazon Instance ID (AMI ID) from the AWS Console. It uses the format of i-abc123def.</p>\n  </div>\n  <form action=\"\">\n    <div class=\"row\">\n      <div class=\"col-xl-8 col-10 offset-xl-3 offset-1 input-wrapper\">\n        <div class=\"row flex-column-reverse flex-xl-row align-items-center\">\n          <div class=\"col-xl-9 col-12 text-right\">\n            <input type=\"text\" class=\"custom-form-input form-control\" placeholder=\"Instance ID\"\n                   name=\"instance-id\"\n                   [(ngModel)]=\"instanceId\"\n                   #id=\"ngModel\"\n                   pattern=\"^i-[0-9a-f]+$\"\n                   (keyup)=\"onKey($event)\"\n                   required>\n          </div>\n          <div class=\"col-xl-3 col-12 pl-xl-0\">\n            <a href=\"javascript:;\" class=\"modal-link\" (click)=\"toggleModal()\">Where should I get my\n              Instance\n              ID?</a>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"id?.errors && isSubmitted\" class=\"col-xl-9 col-xs-12\">\n            <div *ngIf=\"id?.errors?.required\" class=\"error-text\">*Field is required</div>\n            <div *ngIf=\"id?.errors?.pattern\" class=\"error-text\">*Must be correct instance id</div>\n          </div>\n            <div *ngIf=\"errorMessage\" class=\"error-text col-xl-9 col-xs-12\">*{{ errorMessage }}</div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-xl-9 col-12 text-right button-row\">\n            <button class=\"btn btn-primary\"\n                    (click)=\"submit(!id?.valid)\">Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n<div class=\"backdrop\" [class.active]=\"isOpenModal\">\n</div>\n<div class=\"modal\" tabindex=\"-1\" role=\"dialog\" [class.active]=\"isOpenModal\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\" id=\"instance-modal\">\n      <div class=\"modal-body\">\n        <div class=\"d-flex justify-content-between\">\n          <h2>Where to get your instance ID</h2>\n          <i class=\"fa fa-close text-right close-icon\" (click)=\"toggleModal()\"></i>\n        </div>\n        <p>You can copy the instance ID in the Properties panel of your instance, select the Description tab back in\n          the <b>EC2 console</b>. Click the Copy button next to the Instance ID field. This button appears as soon\n          as you hover the cursor of your mouse over the ID.</p>\n        <div>\n          <img src=\"./assets/id-instruction-img.png\" alt=\"instruction-image\">\n          <p><em>Hover the cursor over instance ID for Copy button to appear.</em></p>\n        </div>\n        <p>Paste the instance in the Instance ID field of the Percona Monitoring and Management welcome page and\n          click Submit.</p>\n        <a class=\"modal-button btn btn-primary\" (click)=\"toggleModal()\">Got it, thanks</a>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n})\nexport class AppComponent {\n  constructor() {}\n  title = \"app\";\n}\n","<div style=\"display: none;\">\n  <h1>Welcome to app!</h1>\n</div>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AppRouter } from './app.router';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { AppAmiInstallationComponent } from './ami/ami.component';\nimport { AppOvfComponent } from './ovf/ovf.component';\nimport { AppInstanceIdComponent } from './ami/instance-id/instance-id.component';\nimport { AppAccountCredentialsComponent } from './ami/account-credentials/account-credentials.component';\nimport { AppAccountCredentialsOvfComponent } from './ovf/account-credentials-ovf/account-credentials-ovf.component';\nimport { AppSuccessPageComponent } from './success-page/success-page.component';\nimport { AmiCredentialsGuard, AmiGuard } from './guards/ami.guard';\nimport { OvfGuard } from './guards/ovf.guard';\nimport { AppService } from './app.service';\nimport { MainGuard } from './guards/main.guard';\nimport { AppDockerPageComponent } from './docker-page/docker-page.component';\nimport { SuccessPageGuard } from './guards/success-page.guard';\nimport { DockerGuard } from \"./guards/docker.guard\";\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        AppAmiInstallationComponent,\n        AppInstanceIdComponent,\n        AppAccountCredentialsComponent,\n        AppOvfComponent,\n        AppAccountCredentialsOvfComponent,\n        AppSuccessPageComponent,\n        AppDockerPageComponent,\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        RouterModule.forRoot(AppRouter),\n        FormsModule,\n    ],\n    exports: [\n        AppComponent,\n    ],\n    providers: [MainGuard, AmiGuard, AmiCredentialsGuard, OvfGuard, SuccessPageGuard, DockerGuard, AppService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { Routes } from '@angular/router';\nimport { AppAmiInstallationComponent } from './ami/ami.component';\nimport { AppInstanceIdComponent } from './ami/instance-id/instance-id.component';\nimport { AppAccountCredentialsComponent } from './ami/account-credentials/account-credentials.component';\nimport { AppOvfComponent } from './ovf/ovf.component';\nimport { AppAccountCredentialsOvfComponent } from './ovf/account-credentials-ovf/account-credentials-ovf.component';\nimport { AppSuccessPageComponent } from './success-page/success-page.component';\nimport { AmiCredentialsGuard, AmiGuard } from './guards/ami.guard';\nimport { OvfGuard } from './guards/ovf.guard';\nimport { AppComponent } from './app.component';\nimport { MainGuard } from './guards/main.guard';\nimport { AppDockerPageComponent } from './docker-page/docker-page.component';\nimport { SuccessPageGuard } from './guards/success-page.guard';\nimport { DockerGuard } from './guards/docker.guard';\n\nexport const AppRouter: Routes = [\n    { path: '', children: [\n            {\n                path: '',\n                component: AppComponent, canActivate: [MainGuard]\n            },\n            {\n                path: 'ovf', component: AppOvfComponent, canActivate: [OvfGuard], children: [\n                    { path: 'account-credentials-ovf', component: AppAccountCredentialsOvfComponent },\n                    { path: '', redirectTo: 'account-credentials-ovf', pathMatch: 'full' },\n                ]\n            },\n            {\n                path: 'ami', component: AppAmiInstallationComponent, canActivate: [AmiGuard], children: [\n                    { path: 'instance-id', component: AppInstanceIdComponent },\n                    { path: 'account-credentials', component: AppAccountCredentialsComponent, canActivate: [AmiCredentialsGuard] },\n                    { path: '', redirectTo: 'instance-id', pathMatch: 'full' },\n                ]\n            },\n        ]\n    },\n    { path: 'docker', component: AppDockerPageComponent, canActivate: [DockerGuard] },\n    { path: 'success-page', component: AppSuccessPageComponent, canActivate: [SuccessPageGuard] }\n];\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\n\ninterface UserCredentials {\n    username: string;\n    password: string;\n    instanceId?: string;\n}\n\n@Injectable()\nexport class AppService {\n    private headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    private url = '/configurator/v1/users';\n    private instanceUrl = '/configurator/v1/check-instance';\n    private sshUrl = '/configurator/v1/sshkey';\n    private data = <any>{};\n    _isInstanceChecked = false;\n    _isInstallationComplete = false;\n\n    constructor(private http: HttpClient) {\n    }\n\n    /**\n     * Check installation completing for guards\n     * @returns {boolean} - result of checking instance id\n     */\n    public isInstallationComplete() {\n        return this._isInstallationComplete;\n    }\n\n    /**\n     * Check installation completing for guards\n     * @returns {boolean} - result of checking instance id\n     */\n    public isInstanceChecked() {\n        return this._isInstanceChecked;\n    }\n\n    /**\n     * Send user data\n     * @param {UserCredentials} credentials - username and password\n     * @returns {Promise<{}>} - result of matching credentials\n     */\n    checkUserData(credentials: UserCredentials): Promise<any> {\n        this.data.Username = credentials.username;\n        this.data.Password = credentials.password;\n\n        return this.http\n            .post(this.url, this.data, { headers: this.headers })\n            .toPromise()\n            .then(() => this._isInstallationComplete = true);\n    }\n\n    /**\n     * Send instance id\n     * @param {string} instanceId - instance of user id\n     * @returns {Promise<{}>} - result of matching instanceId\n     */\n    checkInstanceId(instanceId: string): Promise<any> {\n        this.data.Instance = instanceId;\n        return this.http\n            .post(this.instanceUrl, { instanceId }, { headers: this.headers })\n            .toPromise()\n            .then(() => this._isInstanceChecked = true);\n    }\n\n    /**\n     * Send ssh\n     * @param {string} ssh - ssh\n     * @returns {Promise<{}>} - result of matching ssh\n     */\n    checkSSH(ssh: string): Promise<any> {\n        return this.http\n            .post(this.sshUrl, { key: ssh }, { headers: this.headers })\n            .toPromise();\n    }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-docker-page',\n  templateUrl: './docker-page.component.html',\n  styleUrls: ['./docker-page.component.scss']\n})\nexport class AppDockerPageComponent {\n\n  constructor() { }\n}\n","<div class=\"container-fluid header\">\n    <div class=\"row\">\n        <div class=\"col-xl-4 col-5 border-right\">\n            <div class=\"container-fluid\">\n                <div class=\"row\">\n                    <div class=\"col-2\">\n                        <img src=\"./assets/pmm-logo.png\" class=\"header-logo\" alt=\"pmm-logo\">\n                    </div>\n                    <div class=\"col-10\">Percona Monitoring and Management</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-xl-8 col-7\">\n            <p>Installation docker</p>\n        </div>\n    </div>\n</div>\n<p class=\"text-center\">\n    Please use pmm-server options for docker <a\n        href=\"https://www.percona.com/doc/percona-monitoring-and-management/glossary.option.html#pmm-glossary-pmm-server-additional-option\"\n        target=\"_blank\">read more here</a>\n</p>\n\n","import {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    RouterStateSnapshot\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { AppService } from '../app.service';\nimport { environment } from '../../environments/environment';\n\n@Injectable()\nexport class AmiGuard implements CanActivate {\n    INSTALLATION_TYPE = 'ami';\n\n    constructor() { }\n\n    /**\n     * Check on resolution for ami route\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return environment.installationType === this.INSTALLATION_TYPE;\n    }\n}\n\n@Injectable()\nexport class AmiCredentialsGuard implements CanActivate {\n    constructor(private appService: AppService) {\n    }\n\n    /**\n     * Check on resolution for ami children account credentials route\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.appService.isInstanceChecked();\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { environment } from \"../../environments/environment\";\n\n@Injectable()\nexport class DockerGuard implements CanActivate {\n  INSTALLATION_TYPE = \"docker\";\n\n  constructor() {}\n\n  /**\n   * Check resolution for ovf route\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    return environment.installationType === this.INSTALLATION_TYPE;\n  }\n}\n","import {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    RouterStateSnapshot,\n    Router\n} from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\n\nenum Installation {\n    AMI = 'ami',\n    OVF = 'ovf',\n    DOCKER = 'docker'\n}\n\n@Injectable()\nexport class MainGuard implements CanActivate {\n\n    constructor(private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        switch (environment.installationType) {\n            case Installation.AMI:\n                this.router.navigate(['ami']);\n                break;\n            case Installation.OVF:\n                this.router.navigate(['ovf']);\n                break;\n            case Installation.DOCKER:\n                this.router.navigate(['docker']);\n                break;\n        }\n\n        return false;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { environment } from \"../../environments/environment\";\n\n@Injectable()\nexport class OvfGuard implements CanActivate {\n  INSTALLATION_TYPE = \"ovf\";\n\n  constructor() {}\n\n  /**\n   * Check resolution for ovf route\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    return environment.installationType === this.INSTALLATION_TYPE;\n  }\n}\n","import {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    RouterStateSnapshot\n} from '@angular/router';\nimport { AppService } from '../app.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class SuccessPageGuard implements CanActivate {\n    constructor(private appService: AppService) { }\n\n    /**\n     * Check resolution for success page router link\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        return this.appService.isInstallationComplete();\n    }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AppService } from '../../app.service';\n\n@Component({\n    selector: 'app-account-credentials-ovf',\n    templateUrl: './account-credentials-ovf.component.html',\n    styleUrls: ['./account-credentials-ovf.component.scss'],\n})\nexport class AppAccountCredentialsOvfComponent {\n    public ovfUserData = {\n        username: '',\n        password: '',\n    };\n\n    public fields = {\n        USERNAME_OVF: 'usernameOvf',\n        PASSWORD_OVF: 'passwordOvf',\n        REPEAT_PASSWORD_OVF: 'repeatPasswordOvf',\n        SSH_OVF: 'ssh'\n    };\n\n    public ssh = '';\n    public repeatPassword = '';\n    public isIdentical: boolean;\n    public errorMessage: '';\n    public errorMessageSsh: '';\n    public isSubmitted = false;\n\n    constructor(private router: Router, public appService: AppService) {\n    }\n\n    /**\n     * Trim whitespaces in fields\n     * @param event - User keyup event\n     * @param {string} field - Name of active input filed\n     */\n    onKey(event: any, field: string) {\n        switch(field) {\n            case this.fields.USERNAME_OVF: {\n                this.ovfUserData.username = event.target.value.trim();\n                break;\n            }\n\n            case this.fields.PASSWORD_OVF: {\n                this.ovfUserData.password = event.target.value.trim();\n                break;\n            }\n\n            case this.fields.REPEAT_PASSWORD_OVF: {\n                this.repeatPassword = event.target.value.trim();\n                break;\n            }\n\n            case this.fields.SSH_OVF: {\n                this.ssh = event.target.value.trim();\n                break;\n            }\n        }\n        this.isSubmitted = false;\n        this.errorMessage = '';\n    }\n\n    /**\n     * Check passwords fields for identical\n     */\n    public onPasswordChange(): void {\n        this.isIdentical = this.ovfUserData.password === this.repeatPassword;\n    }\n\n    /**\n     * Send a request and navigate to success page if response is success\n     * @returns {boolean | void} boolean - result of matching password fields\n     */\n    public submit(isError): (boolean | void) {\n        this.isSubmitted = true;\n        this.onPasswordChange();\n        if (!this.isIdentical) {\n            return false;\n        }\n        if (isError) return;\n        this.appService.checkUserData(this.ovfUserData).then(() => {\n            if (this.ssh && this.ssh.length) return this.checkSSH();\n            else this.router.navigate(['success-page']);\n        }).catch((err) => {\n            this.errorMessageSsh = err.error.title ? err.error.title : err.statusText;\n        });\n    }\n\n    private checkSSH() {\n        this.appService.checkSSH(this.ssh)\n            .then(() => this.router.navigate(['success-page']))\n            .catch((err) => this.errorMessage = err.error.title ? err.error.title : err.statusText);\n    }\n}\n","<div class=\"tab-pane\">\n  <div class=\"row\">\n    <p class=\"text-center col-8 offset-2\">Create your\n      username and password to access your PMM</p>\n  </div>\n  <form>\n    <div class=\"row\">\n      <div\n        class=\"col-10 offset-xl-2 offset-1 input-wrapper\">\n        <div class=\"row\">\n          <div class=\"col-xl-9 col-12 text-right\">\n            <input type=\"text\" class=\"custom-form-input form-control ng-untouched ng-pristine ng-valid\"\n                   placeholder=\"Username\"\n                   name=\"{{fields.USERNAME_OVF}}\"\n                   [(ngModel)]=\"ovfUserData.username\"\n                   #user=\"ngModel\"\n                   (keyup)=\"onKey($event, fields.USERNAME_OVF)\"\n                   required>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"user?.errors && isSubmitted\"\n               class=\"col-xl-9 col-12 error-text\">\n            <div *ngIf=\"user?.errors?.required\">*Field is required</div>\n          </div>\n          <div *ngIf=\"errorMessage\" class=\"error-text col-xl-9 col-xs-12\">*{{ errorMessage }}</div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-xl-9 col-12 text-right\">\n            <input type=\"password\" class=\"custom-form-input form-control ng-untouched ng-pristine ng-valid\"\n                   placeholder=\"Password\"\n                   name=\"{{ fields.PASSWORD_OVF }}\"\n                   [(ngModel)]=\"ovfUserData.password\"\n                   #pass=\"ngModel\"\n                   (keyup)=\"onKey($event, fields.PASSWORD_OVF)\"\n                   maxlength=\"255\"\n                   required>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"pass?.errors && isSubmitted\"\n               class=\"col-xl-9 col-12 error-text\">\n            <div *ngIf=\"pass?.errors?.required\">*Field is required</div>\n            <div *ngIf=\"pass?.errors?.maxlength\">*Field can not me more than 255 characters</div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-xl-9 col-12 text-right\">\n            <input type=\"password\" class=\"custom-form-input form-control ng-untouched ng-pristine ng-valid\"\n                   placeholder=\"Repeat Password\"\n                   name=\"{{ fields.REPEAT_PASSWORD_OVF }}\"\n                   [(ngModel)]=\"repeatPassword\"\n                   #repeatpass=\"ngModel\"\n                   (keyup)=\"onKey($event, fields.REPEAT_PASSWORD_OVF)\"\n                   required>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"repeatpass?.errors && isSubmitted\"\n               class=\"col-xl-9 col-12 error-text\">\n            <div *ngIf=\"repeatpass?.errors?.required\">*Field is required</div>\n          </div>\n          <div *ngIf=\"!isIdentical && isSubmitted\" class=\"col-lg-9 col-md-9 col-sm-12 error-text\">*Passwords must be identical</div>\n        </div>\n        <div class=\"row flex-container row-ssh\">\n          <div class=\"col-xl-9 col-12 text-right\">\n            <input type=\"text\" class=\"custom-form-input form-control ng-untouched ng-pristine ng-valid\"\n                   placeholder=\"SSH Key\"\n                   name=\"{{ fields.SSH_OVF }}\"\n                   [(ngModel)]=\"ssh\"\n                   (keyup)=\"onKey($event, fields.SSH_OVF)\">\n          </div>\n          <div class=\"col-xl-3 col-12 input-caption font-italic\">\n            <span>*optional</span>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div *ngIf=\"errorMessageSsh\" class=\"error-text col-xl-9 col-xs-12\">*{{ errorMessageSsh }}</div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-xl-9 col-12 text-right button-row\">\n            <button type=\"reset\" class=\"btn btn-primary\">Reset</button>\n            <button class=\"btn btn-primary\" (click)=\"submit(!user?.valid || !pass?.valid || !repeatpass?.valid)\">\n              Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-ovf',\n  templateUrl: './ovf.component.html',\n  styleUrls: ['./ovf.component.scss']\n})\nexport class AppOvfComponent {\n\n  constructor() { }\n}\n","<div class=\"container-fluid header\">\n  <div class=\"row\">\n    <div class=\"col-xl-4 col-5 border-right\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col-2\">\n            <img src=\"./assets/pmm-logo.png\" class=\"header-logo\" alt=\"pmm-logo\">\n          </div>\n          <div class=\"col-10\">Percona Monitoring and Management</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-xl-8 col-7\">\n      <p>Installation <i class=\"fa fa-long-arrow-right\"></i> OVF</p>\n    </div>\n  </div>\n</div>\n<div class=\"container main\">\n  <div class=\"row\">\n    <div class=\"col-xl-10 offset-xl-1 col-12\">\n      <p class=\"text-center\">PMM Installation Wizard</p>\n        <section>\n          <ul class=\"nav nav-tabs\">\n            <li class=\"nav-item\" routerLinkActive=\"active\"><a routerLink=\"account-credentials-ovf\">Account\n              Credentials</a></li>\n          </ul>\n          <div class=\"tab-content\">\n              <router-outlet></router-outlet>\n          </div>\n        </section>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-success-page',\n    templateUrl: './success-page.component.html',\n    styleUrls: ['./success-page.component.scss']\n})\nexport class AppSuccessPageComponent implements OnInit {\n\n    constructor(private router: Router) { }\n\n    ngOnInit() {\n        this.redirectToMainPage();\n    }\n\n    /**\n     * Automatic redirect to installation page\n     */\n    goTo(): void {\n        window.location.replace('/');\n    }\n\n    public redirectToMainPage(): void {\n        setTimeout(() => {\n          this.goTo();\n        }, 5000);\n    }\n}\n","<div class=\"header\">\n    <div class=\"row\">\n        <div class=\"col-xl-4 col-5 border-right\">\n            <div class=\"header-logo\"></div>\n            <p>Percona Monitoring and Management</p>\n        </div>\n        <div class=\"col-xl-8 col-7\">\n            <p>Installation</p>\n        </div>\n    </div>\n</div>\n<p class=\"text-center\">\n    Congratulations! Your PMM is configured.\n    Please click <span class=\"home-link\" (click)=\"goTo()\">here</span> or wait 5 seconds to be redirected to the Index\n    page\n</p>\n<p class=\"text-center\">\n    <i class=\"fa fa-spinner\"></i>\n</p>\n\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  installationType: \"docker\",\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"]}